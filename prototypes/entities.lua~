local hit_effects = require("__base__/prototypes/entity/hit-effects")
local sounds = require("__base__/prototypes/entity/sounds")
local animations = require("animations")
local simulations = require("__base__.prototypes.factoriopedia-simulations")

local function make_warp_unit(name,attack_parameters,resistances,max_health)

local resistances = resistances or {}
local max_health = max_health or 30

local attack_parameters = attack_parameters or {
        type = "beam",
        ammo_category = "laser",
        cooldown = 40,
        cooldown_deviation = 0.2,
        damage_modifier = 0.5,
        range = 10,
        sound = make_laser_sounds(),
        ammo_type =
        {
            category = "laser",
            action =
            {
                type = "direct",
                action_delivery =
                {
                    type = "beam",
                    beam = "laser-beam",
                    max_length = 20,
                    duration = 10,
                }
            }
        },
        animation =
        {
            layers =
            {
                animations.sentry_unit.idle,
                animations.sentry_unit.shadow_idle
            }
        }
    }

local sentry_unit =
{
    type = "unit",
    name = name,
    icon = "__base__/graphics/icons/distractor.png",
    -- icon_size = 64, icon_mipmaps = 4,
    flags = {"placeable-player", "player-creation", "placeable-off-grid"},
    --minable = { mining_time = 0.5, result = "sentry-unit-capsule"},
    --placeable_by = {item = "sentry-unit-capsule", count = 1},
    subgroup = "capsule",
    order = "e-b-b",
    factoriopedia_simulation = simulations.factoriopedia_distractor,

    max_health = max_health,
    vision_distance = 60,
    radar_range = 1,
    movement_speed = 0.2,


    has_belt_immunity = true,
    alert_when_damaged = true,
    absorptions_to_join_attack = { },
    distraction_cooldown = 300,
    min_pursue_time = 10 * 60,
    max_pursue_distance = 50,
    collision_box = {{-0.5, -0.5}, {0.5, 0.5}},
    selection_box = {{-0.5, -0.5}, {0.5, 0.5}},
    hit_visualization_box = {{-0.1, -1.1}, {0.1, -1.0}},
    sticker_box = {{-0.1, -0.1}, {0.1, 0.1}},
    friendly_map_color = {0, 100, 0},
    collision_mask = {
        layers = {},
        not_colliding_with_itself = true,
      },
    dying_explosion = "distractor-robot-explosion",
    distance_per_frame = 0.1,
    water_reflection = robot_reflection(1.2),
    damaged_trigger_effect = hit_effects.flying_robot(),

    resistances = resistances,
    attack_parameters = attack_parameters,

    working_sound =
    {
        sound =
        {
            filename = "__base__/sound/fight/distractor-robot-loop.ogg",
            volume = 0.7
        },
        apparent_volume = 1,
        persistent = true
    },

    dying_trigger_effect =
    {
        type = "create-entity",
        entity_name = "distractor-robot-explosion"
    },

    run_animation =
    {
        layers =
        {
            animations.sentry_unit.in_motion,
            animations.sentry_unit.shadow_in_motion
        }
    },
}

  animations.make_robot_particle(sentry_unit)
  return sentry_unit
end

local bullet_type = {
        type = "projectile",
        ammo_category = "bullet",
        cooldown = 40,
        cooldown_deviation = 0.2,
        damage_modifier = 0.5,
        range = 15,
        sound = make_laser_sounds(),
ammo_type = {
        action = {
          action_delivery = {
            source_effects = {
              entity_name = "explosion-gunshot",
              type = "create-explosion"
            },
            target_effects = {
              {
                entity_name = "explosion-hit",
                offset_deviation = {
                  {
                    -0.5,
                    -0.5
                  },
                  {
                    0.5,
                    0.5
                  }
                },
                offsets = {
                  {
                    0,
                    1
                  }
                },
                type = "create-entity"
              },
              {
                damage = {
                  amount = 12,
                  type = "physical"
                },
                type = "damage"
              },
              {
                deliver_category = "bullet",
                type = "activate-impact"
              }
            },
            type = "instant"
          },
          type = "direct"
        }
      },
        animation =
        {
            layers =
            {
                animations.sentry_unit.idle,
                animations.sentry_unit.shadow_idle
            }
        }
    }

local artilery_type = {
        type = "projectile",
        ammo_category = "bullet",
        cooldown = 40,
        cooldown_deviation = 0.2,
        damage_modifier = 0.5,
        range = 10,
        sound = make_laser_sounds(),
      ammo_type = {
        action = {
          action_delivery = {
            source_effects = {
              entity_name = "explosion-gunshot",
              type = "create-explosion"
            },
            target_effects = {
              damage = {
                amount = 1000,
                type = "physical"
              },
              type = "damage"
            },
            type = "instant"
          },
          range = 50,
          range_effects = {
            entity_name = "railgun-beam",
            type = "create-explosion"
          },
          type = "line",
          width = 1
        },
        clamp_position = true,
        target_type = "direction"
      },
        animation =
        {
            layers =
            {
                animations.sentry_unit.idle,
                animations.sentry_unit.shadow_idle
            }
        }
    }


local units = {}

table.insert(units,make_warp_unit("warp-entity-laser"))
table.insert(units,make_warp_unit("warp-entity-bullet",bullet_type))


local resistances = {
  {
    percent = 25,
    type = "explosion"
  },
  {
    percent = 25,
    type = "physical"
  },
  {
    percent = 25,
    type = "fire"
  },
  {
    percent = 25,
    type = "laser"
  },
  {
    percent = 25,
    type = "impact"
  },
  {
    percent = 25,
    type = "poison"
  },
  {
    percent = 25,
    type = "electric"
  }
}
table.insert(units,make_warp_unit("warp-entity-laser-2",nil,resistances,250))
table.insert(units,make_warp_unit("warp-entity-bullet-2",bullet_type,resistances,250))

local resistances = {
  {
    percent = 50,
    type = "explosion"
  },
  {
    percent = 50,
    type = "physical"
  },
  {
    percent = 50,
    type = "fire"
  },
  {
    percent = 50,
    type = "laser"
  },
  {
    percent = 50,
    type = "impact"
  },
  {
    percent = 50,
    type = "poison"
  },
  {
    percent = 50,
    type = "electric"
  }
}
table.insert(units,make_warp_unit("warp-entity-laser-3",nil,resistances,1500))
table.insert(units,make_warp_unit("warp-entity-bullet-3",bullet_type,resistances,1500))


local warp_biter = table.deepcopy(data.raw["unit"]["medium-biter"])
warp_biter.resistances = {}
warp_biter.max_health = 40
warp_biter.name = "warp-biter"
table.insert(units,warp_biter)

local warp_spitter = table.deepcopy(data.raw["unit"]["medium-spitter"])
warp_spitter.resistances = {}
warp_spitter.max_health = 20
warp_spitter.name = "warp-spitter"
table.insert(units,warp_spitter)

local max_health = 20000
local warp_demolisher = table.deepcopy(data.raw["segmented-unit"]["small-demolisher"])
warp_demolisher.resistances = resistances
warp_demolisher.max_health = max_health
warp_demolisher.name = "warp-demolisher"
warp_demolisher.healing_per_tick = 0
for i,v in pairs(warp_demolisher.segment_engine.segments) do
  local segment = table.deepcopy(data.raw["segment"][v.segment])
  segment.max_health = max_health
  segment.resistances = {}
  segment.name = "warp-"..v.segment
  segment.healing_per_tick = 0
  warp_demolisher.segment_engine.segments[i] = { segment = segment.name }
  table.insert(units,segment)
end
table.insert(units,warp_demolisher)

data:extend(units)
